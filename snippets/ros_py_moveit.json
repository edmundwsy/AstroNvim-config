{
    "moveitInit": {
        "prefix": "moveit_init",
        "body": [
            "import sys",
            "import moveit_commander",
            "from moveit_msgs.msg import DisplayTrajectory\n\n",
            "moveit_commander.roscpp_initialize(sys.argv)\n",
            "robot = moveit_commander.RobotCommander()",
            "scene = moveit_commander.PlanningSceneInterface()",
            "group_name = \"${1:robot_arm_name}\"",
            "move_group = moveit_commander.MoveGroupCommander(group_name)",
            "display_trajectory_pub = rospy.Publisher(\"move_group/display_planned_path\", DisplayTrajectory, queue_size=20)",
            "$0"
        ],
        "description": "Initialize moveit rospy"
    },
    "planningJointGoal": {
        "prefix": "plan_joint_goal",
        "body": [
            "${1:joint_goal} = ${2:move_group}.get_current_joint_values()",
            "${1}[0] = ${3:0.0}",
            "${1}[1] = ${4:0.0}",
            "${1}[2] = ${5:0.0}",
            "${1}[3] = ${6:0.0}",
            "${1}[4] = ${7:0.0}",
            "${1}[5] = ${8:0.0}",
            "\n${2}.go(${1}, wait=${9:True})",
            "${2}.stop()\n$0"
        ],
        "description": "Planning to a Joint Goal"
    },
    "planningPoseGoal": {
        "prefix": "plan_pose_goal",
        "body": [
            "${1:pose_goal} = Pose()",
            "${1}.position.x = ${2:0.0}",
            "${1}.position.y = ${3:0.0}",
            "${1}.position.z = ${4:0.0}",
            "q = tf.transformations.quaternion_from_euler(${5:0.0}, ${6:0.0}, ${7:0.0})",
            "${1}.orientation.x = q[0]",
            "${1}.orientation.y = q[0]",
            "${1}.orientation.z = q[0]",
            "${1}.orientation.w = q[0]",
            "\n${8:move_group}.set_pose_target(${1})",
            "${10:plan} = ${8}.go(wait=${9:True})",
            "${8}.stop()",
            "${8}.clear_pose_targets()"
        ],
        "description": "Planning to a Pose Goal"
    },
    "planningCartesionPaths": {
        "prefix": "plan_cartesian_paths",
        "body": [
            "${1:waypoints} = [] # List of Pose",
            "$0",
            "\n(${5:plan}, ${6:fraction}) = ${2:move_group}.compute_cartesian_path(${1}, eef_step = ${3:0.01}, jump_threshold = ${4:0.0})"
        ],
        "description": "Planning to a Cartesian Paths"
    },
    "waypointPoseRelative": {
        "prefix": "wpose_relative",
        "body": [
            "${1:wpose} = ${2:move_group}.get_current_pose().pose",
            "${1}.position.x ${3:+= 0.0}",
            "${1}.position.y ${4:+= 0.0}",
            "${1}.position.z ${5:+= 0.0}",
            "${6:waypoints}.append(copy.deepcopy(${1}))\n"
        ],
        "description": "Insert pose to waypoints with relative of current pose"
    },
    "waypointPoseAbsolute": {
        "prefix": "wpose_absolute",
        "body": [
            "${1:wpose} = Pose()",
            "${1}.position.x ${2:= 0.0}",
            "${1}.position.y ${3:= 0.0}",
            "${1}.position.z ${4:= 0.0}",
            "q = tf.transformations.quaternion_from_euler(${5:0.0}, ${6:0.0}, ${7:0.0})",
            "${1}.orientation.x = q[0]",
            "${1}.orientation.y = q[0]",
            "${1}.orientation.z = q[0]",
            "${1}.orientation.w = q[0]",
            "${8:waypoints}.append(copy.deepcopy(${1}))\n"
        ],
        "description": "Insert pose to waypoints with absolute of pose"
    },
    "displayTrajectory": {
        "prefix": "display_trajectory",
        "body": [
            "${1:display_trajectory} = DisplayTrajectory()",
            "${1}.trajectory_start = ${2:robot}.get_current_state()",
            "${1}.trajectory.append(${3:plan})",
            "${4:display_trajectory_pub}.publish(${1})\n"
        ],
        "description": "call RViz to visualize a plan"
    },
    "executingPlan": {
        "prefix": "execute_plan",
        "body": "${1:move_group}.execute(${2:plan}, wait=${3:True})",
        "description": "Executing the plan"
    },
    "addBoxToScene": {
        "prefix": "add_object_box",
        "body": [
            "${1:box_pose} = PoseStamped()",
            "${1}.header.frame_id = \"${2:box_frame}\"",
            "${1}.pose.position.x ${3:= 0.0}",
            "${1}.pose.position.y ${4:= 0.0}",
            "${1}.pose.position.z ${5:= 0.0}",
            "q = tf.transformations.quaternion_from_euler(${6:0.0}, ${7:0.0}, ${8:0.0})",
            "${1}.pose.orientation.x = q[0]",
            "${1}.pose.orientation.y = q[0]",
            "${1}.pose.orientation.z = q[0]",
            "${1}.pose.orientation.w = q[0]",
            "${9:scene}.add_box(\"${10:box_name}\", ${1}, size=(${11:0.1}, ${12:0.1}, ${13:0.1})"
        ],
        "description": "add box object to the planning scene"
    }
}